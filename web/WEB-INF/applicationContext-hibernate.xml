<!--
* @(#)applicationContext-hibernate.xml  Jul 27, 2005
*
* Copyright 2005 Lockheed Martin
* 1010 North Glebe Road, Arlington, VA, 22201 USA
* All Rights Reserved
*
* This software is the confidential and propietary information of Lockheed
* Martin ("Confidential Information").  You shall not disclose such
* Confidential Information and shall use it only in accordance with the
* terms of the license agreement you entered into with Lockheed Martin.
-->

<!--
 * Spring applicationContext file for Hibernate
 * @authors Pramod Kudva
 * @authors Krishna Kuchibhotla
 * @version $Revision: 1.3 $
-->
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans>


    <!-- ========================= RESOURCE DEFINITIONS ========================= -->

    <!-- Configurer that replaces ${...} placeholders with values from a properties file -->
    <bean id="propertyConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
        	<list>
            <value>classpath:hibernate.properties</value>
            <value>classpath:mail.properties</value>
            </list>
        </property>
    </bean>
	
	<!--  mailsender configuration for Spring based emails -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
	    <property name="host"><value>${mail.host}</value></property>
	    <property name="port"><value>${mail.port}</value></property>
	</bean>
	
	<bean id="mailMessage" class="org.springframework.mail.SimpleMailMessage">
	  <property name="from"><value>${mail.from}</value></property>
	</bean>

	
    <!-- Local DataSource that works in any environment -->
     
       <bean id="cwnsDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
    	  <property name="jndiName" value="${cwns.jndiDataSourceName}"/>
  	   </bean>

<!--
   <bean id="cwnsDataSource"
        class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
    
        <property name="driverClassName">
            <value>${hibernate.connection.driver_class}</value>
        </property>
            
        <property name="url">
            <value>${hibernate.connection.url}</value>
        </property>    
        
        <property name="username">
            <value>${hibernate.connection.username}</value>
        </property>
        
        <property name="password">
            <value>${hibernate.connection.password}</value>
        </property>
    </bean>
-->
    <!-- Hibernate SessionFactory for CWNS Datasource-->    
    <bean id="sessionFactory"
        class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        
        <property name="dataSource">
            <ref local="cwnsDataSource" />
        </property>
        <property name="mappingDirectoryLocations">
       		<list>
          		<value>classpath:/gov/epa/owm/mtb/cwns/model</value>
       		</list>
    	</property>                
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
                <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
                <prop key="hibernate.query.substitutions">${hibernate.query.substitutions}</prop>
                <!-- prop key="hibernate.query.factory_class">org.hibernate.hql.classic.ClassicQueryTranslatorFactory</prop -->
            </props>
        </property>
<!-- 
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.showsql}</prop>
                <prop key="hibernate.query.substitutions">${hibernate.query.substitutions}</prop>
                <prop key="hibernate.bytecode.use_reflection_optimizer">${hibernate.bytecode.use_reflection_optimizer}</prop>
                <prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
                <prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
            </props>
        </property>        
 -->                
    </bean>
	
    <!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory">
        <ref local="sessionFactory"/>
        </property>
    </bean>

    <bean id="hibernateInterceptor" class="org.springframework.orm.hibernate3.HibernateInterceptor">
        <property name="sessionFactory">
        <ref local="sessionFactory"/>
        </property>
	</bean>
	
    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
        <property name="cacheQueries">
            <value>false</value>
        </property>
        <property name="allowCreate">
        	<value>true</value>
        </property>
    </bean>
        
    <!-- This is the base definition for all Hibernate based DAOs -->
    <bean id="hibernateDaoSupport" 
          class="org.springframework.orm.hibernate3.support.HibernateDaoSupport"
          abstract="true">
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
        <property name="hibernateTemplate">
            <ref bean="hibernateTemplate"/>
        </property>
    </bean>	
	
</beans>